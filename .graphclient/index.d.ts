import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { MeshHTTPHandler } from '@graphql-mesh/http';
import { ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import type { ExchnageTypes } from './sources/Exchnage/types';
export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type RequireFields<T, K extends keyof T> = Omit<T, K> & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Exchange_BigDecimal: any;
    BigInt: any;
    Exchange_Bytes: any;
};
export declare type Exchange_BlockChangedFilter = {
    number_gte: Scalars['Int'];
};
export declare type Exchange_Block_height = {
    hash?: InputMaybe<Scalars['Exchange_Bytes']>;
    number?: InputMaybe<Scalars['Int']>;
    number_gte?: InputMaybe<Scalars['Int']>;
};
export declare type Exchange_Bundle = {
    id: Scalars['ID'];
    ethPrice: Scalars['Exchange_BigDecimal'];
};
export declare type Exchange_Bundle_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    ethPrice?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    ethPrice_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    ethPrice_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Bundle_orderBy = 'id' | 'ethPrice';
export declare type Exchange_Burn = {
    id: Scalars['ID'];
    transaction: Exchange_Transaction;
    timestamp: Scalars['BigInt'];
    pair: Exchange_Pair;
    liquidity: Scalars['Exchange_BigDecimal'];
    sender?: Maybe<Scalars['Exchange_Bytes']>;
    amount0?: Maybe<Scalars['Exchange_BigDecimal']>;
    amount1?: Maybe<Scalars['Exchange_BigDecimal']>;
    to?: Maybe<Scalars['Exchange_Bytes']>;
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD?: Maybe<Scalars['Exchange_BigDecimal']>;
    complete: Scalars['Boolean'];
    feeTo?: Maybe<Scalars['Exchange_Bytes']>;
    feeLiquidity?: Maybe<Scalars['Exchange_BigDecimal']>;
};
export declare type Exchange_Burn_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Exchange_Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    liquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    sender?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    amount0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    to?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    complete?: InputMaybe<Scalars['Boolean']>;
    complete_not?: InputMaybe<Scalars['Boolean']>;
    complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
    complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    feeTo?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    feeTo_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    feeTo_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeLiquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    feeLiquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Burn_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'liquidity' | 'sender' | 'amount0' | 'amount1' | 'to' | 'logIndex' | 'amountUSD' | 'complete' | 'feeTo' | 'feeLiquidity';
export declare type Exchange_DayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    factory: Exchange_Factory;
    volumeETH: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    untrackedVolume: Scalars['Exchange_BigDecimal'];
    liquidityETH: Scalars['Exchange_BigDecimal'];
    liquidityUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type Exchange_DayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Exchange_Factory_filter>;
    volumeETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolume?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolume_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_DayData_orderBy = 'id' | 'date' | 'factory' | 'volumeETH' | 'volumeUSD' | 'untrackedVolume' | 'liquidityETH' | 'liquidityUSD' | 'txCount';
export declare type Exchange_Factory = {
    id: Scalars['ID'];
    pairCount: Scalars['BigInt'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    volumeETH: Scalars['Exchange_BigDecimal'];
    untrackedVolumeUSD: Scalars['Exchange_BigDecimal'];
    liquidityUSD: Scalars['Exchange_BigDecimal'];
    liquidityETH: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
    tokenCount: Scalars['BigInt'];
    userCount: Scalars['BigInt'];
    pairs: Array<Exchange_Pair>;
    tokens: Array<Exchange_Token>;
    hourData: Array<Exchange_HourData>;
    dayData: Array<Exchange_DayData>;
};
export declare type Exchange_FactorypairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Pair_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Pair_filter>;
};
export declare type Exchange_FactorytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Token_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Token_filter>;
};
export declare type Exchange_FactoryhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_HourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_HourData_filter>;
};
export declare type Exchange_FactorydayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_DayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_DayData_filter>;
};
export declare type Exchange_Factory_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    pairCount?: InputMaybe<Scalars['BigInt']>;
    pairCount_not?: InputMaybe<Scalars['BigInt']>;
    pairCount_gt?: InputMaybe<Scalars['BigInt']>;
    pairCount_lt?: InputMaybe<Scalars['BigInt']>;
    pairCount_gte?: InputMaybe<Scalars['BigInt']>;
    pairCount_lte?: InputMaybe<Scalars['BigInt']>;
    pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    tokenCount?: InputMaybe<Scalars['BigInt']>;
    tokenCount_not?: InputMaybe<Scalars['BigInt']>;
    tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
    tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
    tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
    tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
    tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    userCount?: InputMaybe<Scalars['BigInt']>;
    userCount_not?: InputMaybe<Scalars['BigInt']>;
    userCount_gt?: InputMaybe<Scalars['BigInt']>;
    userCount_lt?: InputMaybe<Scalars['BigInt']>;
    userCount_gte?: InputMaybe<Scalars['BigInt']>;
    userCount_lte?: InputMaybe<Scalars['BigInt']>;
    userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pairs_?: InputMaybe<Exchange_Pair_filter>;
    tokens_?: InputMaybe<Exchange_Token_filter>;
    hourData_?: InputMaybe<Exchange_HourData_filter>;
    dayData_?: InputMaybe<Exchange_DayData_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Factory_orderBy = 'id' | 'pairCount' | 'volumeUSD' | 'volumeETH' | 'untrackedVolumeUSD' | 'liquidityUSD' | 'liquidityETH' | 'txCount' | 'tokenCount' | 'userCount' | 'pairs' | 'tokens' | 'hourData' | 'dayData';
export declare type Exchange_HourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    factory: Exchange_Factory;
    volumeETH: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    untrackedVolume: Scalars['Exchange_BigDecimal'];
    liquidityETH: Scalars['Exchange_BigDecimal'];
    liquidityUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type Exchange_HourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Exchange_Factory_filter>;
    volumeETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolume?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolume_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolume_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_HourData_orderBy = 'id' | 'date' | 'factory' | 'volumeETH' | 'volumeUSD' | 'untrackedVolume' | 'liquidityETH' | 'liquidityUSD' | 'txCount';
export declare type Exchange_LiquidityPosition = {
    id: Scalars['ID'];
    user: Exchange_User;
    pair: Exchange_Pair;
    liquidityTokenBalance: Scalars['Exchange_BigDecimal'];
    snapshots: Array<Maybe<Exchange_LiquidityPositionSnapshot>>;
    block: Scalars['Int'];
    timestamp: Scalars['Int'];
};
export declare type Exchange_LiquidityPositionsnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
};
export declare type Exchange_LiquidityPositionSnapshot = {
    id: Scalars['ID'];
    liquidityPosition: Exchange_LiquidityPosition;
    timestamp: Scalars['Int'];
    block: Scalars['Int'];
    user: Exchange_User;
    pair: Exchange_Pair;
    token0PriceUSD: Scalars['Exchange_BigDecimal'];
    token1PriceUSD: Scalars['Exchange_BigDecimal'];
    reserve0: Scalars['Exchange_BigDecimal'];
    reserve1: Scalars['Exchange_BigDecimal'];
    reserveUSD: Scalars['Exchange_BigDecimal'];
    liquidityTokenTotalSupply: Scalars['Exchange_BigDecimal'];
    liquidityTokenBalance: Scalars['Exchange_BigDecimal'];
};
export declare type Exchange_LiquidityPositionSnapshot_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    liquidityPosition?: InputMaybe<Scalars['String']>;
    liquidityPosition_not?: InputMaybe<Scalars['String']>;
    liquidityPosition_gt?: InputMaybe<Scalars['String']>;
    liquidityPosition_lt?: InputMaybe<Scalars['String']>;
    liquidityPosition_gte?: InputMaybe<Scalars['String']>;
    liquidityPosition_lte?: InputMaybe<Scalars['String']>;
    liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
    liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidityPosition_contains?: InputMaybe<Scalars['String']>;
    liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidityPosition_?: InputMaybe<Exchange_LiquidityPosition_filter>;
    timestamp?: InputMaybe<Scalars['Int']>;
    timestamp_not?: InputMaybe<Scalars['Int']>;
    timestamp_gt?: InputMaybe<Scalars['Int']>;
    timestamp_lt?: InputMaybe<Scalars['Int']>;
    timestamp_gte?: InputMaybe<Scalars['Int']>;
    timestamp_lte?: InputMaybe<Scalars['Int']>;
    timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
    block?: InputMaybe<Scalars['Int']>;
    block_not?: InputMaybe<Scalars['Int']>;
    block_gt?: InputMaybe<Scalars['Int']>;
    block_lt?: InputMaybe<Scalars['Int']>;
    block_gte?: InputMaybe<Scalars['Int']>;
    block_lte?: InputMaybe<Scalars['Int']>;
    block_in?: InputMaybe<Array<Scalars['Int']>>;
    block_not_in?: InputMaybe<Array<Scalars['Int']>>;
    user?: InputMaybe<Scalars['String']>;
    user_not?: InputMaybe<Scalars['String']>;
    user_gt?: InputMaybe<Scalars['String']>;
    user_lt?: InputMaybe<Scalars['String']>;
    user_gte?: InputMaybe<Scalars['String']>;
    user_lte?: InputMaybe<Scalars['String']>;
    user_in?: InputMaybe<Array<Scalars['String']>>;
    user_not_in?: InputMaybe<Array<Scalars['String']>>;
    user_contains?: InputMaybe<Scalars['String']>;
    user_contains_nocase?: InputMaybe<Scalars['String']>;
    user_not_contains?: InputMaybe<Scalars['String']>;
    user_not_contains_nocase?: InputMaybe<Scalars['String']>;
    user_starts_with?: InputMaybe<Scalars['String']>;
    user_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_starts_with?: InputMaybe<Scalars['String']>;
    user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_ends_with?: InputMaybe<Scalars['String']>;
    user_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_ends_with?: InputMaybe<Scalars['String']>;
    user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_?: InputMaybe<Exchange_User_filter>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    token0PriceUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0PriceUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token0PriceUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token1PriceUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1PriceUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token1PriceUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityTokenTotalSupply?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityTokenBalance?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_LiquidityPositionSnapshot_orderBy = 'id' | 'liquidityPosition' | 'timestamp' | 'block' | 'user' | 'pair' | 'token0PriceUSD' | 'token1PriceUSD' | 'reserve0' | 'reserve1' | 'reserveUSD' | 'liquidityTokenTotalSupply' | 'liquidityTokenBalance';
export declare type Exchange_LiquidityPosition_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    user?: InputMaybe<Scalars['String']>;
    user_not?: InputMaybe<Scalars['String']>;
    user_gt?: InputMaybe<Scalars['String']>;
    user_lt?: InputMaybe<Scalars['String']>;
    user_gte?: InputMaybe<Scalars['String']>;
    user_lte?: InputMaybe<Scalars['String']>;
    user_in?: InputMaybe<Array<Scalars['String']>>;
    user_not_in?: InputMaybe<Array<Scalars['String']>>;
    user_contains?: InputMaybe<Scalars['String']>;
    user_contains_nocase?: InputMaybe<Scalars['String']>;
    user_not_contains?: InputMaybe<Scalars['String']>;
    user_not_contains_nocase?: InputMaybe<Scalars['String']>;
    user_starts_with?: InputMaybe<Scalars['String']>;
    user_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_starts_with?: InputMaybe<Scalars['String']>;
    user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    user_ends_with?: InputMaybe<Scalars['String']>;
    user_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_not_ends_with?: InputMaybe<Scalars['String']>;
    user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    user_?: InputMaybe<Exchange_User_filter>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    liquidityTokenBalance?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityTokenBalance_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    snapshots_?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Scalars['Int']>;
    block_not?: InputMaybe<Scalars['Int']>;
    block_gt?: InputMaybe<Scalars['Int']>;
    block_lt?: InputMaybe<Scalars['Int']>;
    block_gte?: InputMaybe<Scalars['Int']>;
    block_lte?: InputMaybe<Scalars['Int']>;
    block_in?: InputMaybe<Array<Scalars['Int']>>;
    block_not_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp?: InputMaybe<Scalars['Int']>;
    timestamp_not?: InputMaybe<Scalars['Int']>;
    timestamp_gt?: InputMaybe<Scalars['Int']>;
    timestamp_lt?: InputMaybe<Scalars['Int']>;
    timestamp_gte?: InputMaybe<Scalars['Int']>;
    timestamp_lte?: InputMaybe<Scalars['Int']>;
    timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_LiquidityPosition_orderBy = 'id' | 'user' | 'pair' | 'liquidityTokenBalance' | 'snapshots' | 'block' | 'timestamp';
export declare type Exchange_Mint = {
    id: Scalars['ID'];
    transaction: Exchange_Transaction;
    timestamp: Scalars['BigInt'];
    pair: Exchange_Pair;
    to: Scalars['Exchange_Bytes'];
    liquidity: Scalars['Exchange_BigDecimal'];
    sender?: Maybe<Scalars['Exchange_Bytes']>;
    amount0?: Maybe<Scalars['Exchange_BigDecimal']>;
    amount1?: Maybe<Scalars['Exchange_BigDecimal']>;
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD?: Maybe<Scalars['Exchange_BigDecimal']>;
    feeTo?: Maybe<Scalars['Exchange_Bytes']>;
    feeLiquidity?: Maybe<Scalars['Exchange_BigDecimal']>;
};
export declare type Exchange_Mint_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Exchange_Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    to?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    liquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    sender?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    amount0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    feeTo?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    feeTo_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    feeTo_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeTo_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    feeLiquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    feeLiquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    feeLiquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Mint_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'to' | 'liquidity' | 'sender' | 'amount0' | 'amount1' | 'logIndex' | 'amountUSD' | 'feeTo' | 'feeLiquidity';
/** Defines the order direction, either ascending or descending */
export declare type Exchange_OrderDirection = 'asc' | 'desc';
export declare type Exchange_Pair = {
    id: Scalars['ID'];
    factory: Exchange_Factory;
    name: Scalars['String'];
    token0: Exchange_Token;
    token1: Exchange_Token;
    reserve0: Scalars['Exchange_BigDecimal'];
    reserve1: Scalars['Exchange_BigDecimal'];
    totalSupply: Scalars['Exchange_BigDecimal'];
    reserveETH: Scalars['Exchange_BigDecimal'];
    reserveUSD: Scalars['Exchange_BigDecimal'];
    trackedReserveETH: Scalars['Exchange_BigDecimal'];
    token0Price: Scalars['Exchange_BigDecimal'];
    token1Price: Scalars['Exchange_BigDecimal'];
    volumeToken0: Scalars['Exchange_BigDecimal'];
    volumeToken1: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    untrackedVolumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidityProviderCount: Scalars['BigInt'];
    liquidityPositions: Array<Exchange_LiquidityPosition>;
    liquidityPositionSnapshots: Array<Exchange_LiquidityPositionSnapshot>;
    dayData: Array<Exchange_PairDayData>;
    hourData: Array<Exchange_PairHourData>;
    mints: Array<Exchange_Mint>;
    burns: Array<Exchange_Burn>;
    swaps: Array<Exchange_Swap>;
    timestamp: Scalars['BigInt'];
    block: Scalars['BigInt'];
};
export declare type Exchange_PairliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
};
export declare type Exchange_PairliquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
};
export declare type Exchange_PairdayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairDayData_filter>;
};
export declare type Exchange_PairhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairHourData_filter>;
};
export declare type Exchange_PairmintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Mint_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Mint_filter>;
};
export declare type Exchange_PairburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Burn_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Burn_filter>;
};
export declare type Exchange_PairswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Swap_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Swap_filter>;
};
export declare type Exchange_PairDayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    pair: Exchange_Pair;
    token0: Exchange_Token;
    token1: Exchange_Token;
    reserve0: Scalars['Exchange_BigDecimal'];
    reserve1: Scalars['Exchange_BigDecimal'];
    totalSupply: Scalars['Exchange_BigDecimal'];
    reserveUSD: Scalars['Exchange_BigDecimal'];
    volumeToken0: Scalars['Exchange_BigDecimal'];
    volumeToken1: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type Exchange_PairDayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    token0?: InputMaybe<Scalars['String']>;
    token0_not?: InputMaybe<Scalars['String']>;
    token0_gt?: InputMaybe<Scalars['String']>;
    token0_lt?: InputMaybe<Scalars['String']>;
    token0_gte?: InputMaybe<Scalars['String']>;
    token0_lte?: InputMaybe<Scalars['String']>;
    token0_in?: InputMaybe<Array<Scalars['String']>>;
    token0_not_in?: InputMaybe<Array<Scalars['String']>>;
    token0_contains?: InputMaybe<Scalars['String']>;
    token0_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_not_contains?: InputMaybe<Scalars['String']>;
    token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_starts_with?: InputMaybe<Scalars['String']>;
    token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_starts_with?: InputMaybe<Scalars['String']>;
    token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_ends_with?: InputMaybe<Scalars['String']>;
    token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_ends_with?: InputMaybe<Scalars['String']>;
    token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_?: InputMaybe<Exchange_Token_filter>;
    token1?: InputMaybe<Scalars['String']>;
    token1_not?: InputMaybe<Scalars['String']>;
    token1_gt?: InputMaybe<Scalars['String']>;
    token1_lt?: InputMaybe<Scalars['String']>;
    token1_gte?: InputMaybe<Scalars['String']>;
    token1_lte?: InputMaybe<Scalars['String']>;
    token1_in?: InputMaybe<Array<Scalars['String']>>;
    token1_not_in?: InputMaybe<Array<Scalars['String']>>;
    token1_contains?: InputMaybe<Scalars['String']>;
    token1_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_not_contains?: InputMaybe<Scalars['String']>;
    token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_starts_with?: InputMaybe<Scalars['String']>;
    token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_starts_with?: InputMaybe<Scalars['String']>;
    token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_ends_with?: InputMaybe<Scalars['String']>;
    token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_ends_with?: InputMaybe<Scalars['String']>;
    token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_?: InputMaybe<Exchange_Token_filter>;
    reserve0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    totalSupply?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_PairDayData_orderBy = 'id' | 'date' | 'pair' | 'token0' | 'token1' | 'reserve0' | 'reserve1' | 'totalSupply' | 'reserveUSD' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'txCount';
export declare type Exchange_PairHourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    pair: Exchange_Pair;
    reserve0: Scalars['Exchange_BigDecimal'];
    reserve1: Scalars['Exchange_BigDecimal'];
    reserveUSD: Scalars['Exchange_BigDecimal'];
    volumeToken0: Scalars['Exchange_BigDecimal'];
    volumeToken1: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
};
export declare type Exchange_PairHourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    reserve0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_PairHourData_orderBy = 'id' | 'date' | 'pair' | 'reserve0' | 'reserve1' | 'reserveUSD' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'txCount';
export declare type Exchange_Pair_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Exchange_Factory_filter>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0?: InputMaybe<Scalars['String']>;
    token0_not?: InputMaybe<Scalars['String']>;
    token0_gt?: InputMaybe<Scalars['String']>;
    token0_lt?: InputMaybe<Scalars['String']>;
    token0_gte?: InputMaybe<Scalars['String']>;
    token0_lte?: InputMaybe<Scalars['String']>;
    token0_in?: InputMaybe<Array<Scalars['String']>>;
    token0_not_in?: InputMaybe<Array<Scalars['String']>>;
    token0_contains?: InputMaybe<Scalars['String']>;
    token0_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_not_contains?: InputMaybe<Scalars['String']>;
    token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token0_starts_with?: InputMaybe<Scalars['String']>;
    token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_starts_with?: InputMaybe<Scalars['String']>;
    token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token0_ends_with?: InputMaybe<Scalars['String']>;
    token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_not_ends_with?: InputMaybe<Scalars['String']>;
    token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token0_?: InputMaybe<Exchange_Token_filter>;
    token1?: InputMaybe<Scalars['String']>;
    token1_not?: InputMaybe<Scalars['String']>;
    token1_gt?: InputMaybe<Scalars['String']>;
    token1_lt?: InputMaybe<Scalars['String']>;
    token1_gte?: InputMaybe<Scalars['String']>;
    token1_lte?: InputMaybe<Scalars['String']>;
    token1_in?: InputMaybe<Array<Scalars['String']>>;
    token1_not_in?: InputMaybe<Array<Scalars['String']>>;
    token1_contains?: InputMaybe<Scalars['String']>;
    token1_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_not_contains?: InputMaybe<Scalars['String']>;
    token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token1_starts_with?: InputMaybe<Scalars['String']>;
    token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_starts_with?: InputMaybe<Scalars['String']>;
    token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token1_ends_with?: InputMaybe<Scalars['String']>;
    token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_not_ends_with?: InputMaybe<Scalars['String']>;
    token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token1_?: InputMaybe<Exchange_Token_filter>;
    reserve0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserve1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserve1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    totalSupply?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    totalSupply_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    reserveUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    reserveUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    trackedReserveETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    trackedReserveETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    trackedReserveETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token0Price?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token0Price_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token0Price_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token1Price?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    token1Price_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    token1Price_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken0_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken0_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeToken1_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeToken1_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
    liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidityPositions_?: InputMaybe<Exchange_LiquidityPosition_filter>;
    liquidityPositionSnapshots_?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
    dayData_?: InputMaybe<Exchange_PairDayData_filter>;
    hourData_?: InputMaybe<Exchange_PairHourData_filter>;
    mints_?: InputMaybe<Exchange_Mint_filter>;
    burns_?: InputMaybe<Exchange_Burn_filter>;
    swaps_?: InputMaybe<Exchange_Swap_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    block?: InputMaybe<Scalars['BigInt']>;
    block_not?: InputMaybe<Scalars['BigInt']>;
    block_gt?: InputMaybe<Scalars['BigInt']>;
    block_lt?: InputMaybe<Scalars['BigInt']>;
    block_gte?: InputMaybe<Scalars['BigInt']>;
    block_lte?: InputMaybe<Scalars['BigInt']>;
    block_in?: InputMaybe<Array<Scalars['BigInt']>>;
    block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Pair_orderBy = 'id' | 'factory' | 'name' | 'token0' | 'token1' | 'reserve0' | 'reserve1' | 'totalSupply' | 'reserveETH' | 'reserveUSD' | 'trackedReserveETH' | 'token0Price' | 'token1Price' | 'volumeToken0' | 'volumeToken1' | 'volumeUSD' | 'untrackedVolumeUSD' | 'txCount' | 'liquidityProviderCount' | 'liquidityPositions' | 'liquidityPositionSnapshots' | 'dayData' | 'hourData' | 'mints' | 'burns' | 'swaps' | 'timestamp' | 'block';
export declare type Query = {
    Exchange_user?: Maybe<Exchange_User>;
    Exchange_users: Array<Exchange_User>;
    Exchange_bundle?: Maybe<Exchange_Bundle>;
    Exchange_bundles: Array<Exchange_Bundle>;
    Exchange_factory?: Maybe<Exchange_Factory>;
    Exchange_factories: Array<Exchange_Factory>;
    Exchange_hourData?: Maybe<Exchange_HourData>;
    Exchange_hourDatas: Array<Exchange_HourData>;
    Exchange_dayData?: Maybe<Exchange_DayData>;
    Exchange_dayDatas: Array<Exchange_DayData>;
    Exchange_token?: Maybe<Exchange_Token>;
    Exchange_tokens: Array<Exchange_Token>;
    Exchange_tokenHourData?: Maybe<Exchange_TokenHourData>;
    Exchange_tokenHourDatas: Array<Exchange_TokenHourData>;
    Exchange_tokenDayData?: Maybe<Exchange_TokenDayData>;
    Exchange_tokenDayDatas: Array<Exchange_TokenDayData>;
    Exchange_pair?: Maybe<Exchange_Pair>;
    Exchange_pairs: Array<Exchange_Pair>;
    Exchange_pairHourData?: Maybe<Exchange_PairHourData>;
    Exchange_pairHourDatas: Array<Exchange_PairHourData>;
    Exchange_pairDayData?: Maybe<Exchange_PairDayData>;
    Exchange_pairDayDatas: Array<Exchange_PairDayData>;
    Exchange_liquidityPosition?: Maybe<Exchange_LiquidityPosition>;
    Exchange_liquidityPositions: Array<Exchange_LiquidityPosition>;
    Exchange_liquidityPositionSnapshot?: Maybe<Exchange_LiquidityPositionSnapshot>;
    Exchange_liquidityPositionSnapshots: Array<Exchange_LiquidityPositionSnapshot>;
    Exchange_transaction?: Maybe<Exchange_Transaction>;
    Exchange_transactions: Array<Exchange_Transaction>;
    Exchange_mint?: Maybe<Exchange_Mint>;
    Exchange_mints: Array<Exchange_Mint>;
    Exchange_burn?: Maybe<Exchange_Burn>;
    Exchange_burns: Array<Exchange_Burn>;
    Exchange_swap?: Maybe<Exchange_Swap>;
    Exchange_swaps: Array<Exchange_Swap>;
    Exchange_tokenSearch: Array<Exchange_Token>;
    Exchange_pairSearch: Array<Exchange_Pair>;
    Exchange_userSearch: Array<Exchange_User>;
    /** Access to subgraph metadata */
    Exchange__meta?: Maybe<Exchange__Meta_>;
};
export declare type QueryExchange_userArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_usersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_User_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_User_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_bundleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_bundlesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Bundle_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Bundle_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_factoryArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_factoriesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Factory_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Factory_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_hourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_hourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_HourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_HourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_dayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_dayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_DayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_DayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Token_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Token_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenHourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenDayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Pair_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Pair_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairHourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairDayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_liquidityPositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_liquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_liquidityPositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_liquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_transactionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_transactionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Transaction_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Transaction_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_mintArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_mintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Mint_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Mint_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_burnArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_burnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Burn_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Burn_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_swapArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_swapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Swap_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Swap_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_tokenSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_pairSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange_userSearchArgs = {
    text: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type QueryExchange__metaArgs = {
    block?: InputMaybe<Exchange_Block_height>;
};
export declare type Subscription = {
    Exchange_user?: Maybe<Exchange_User>;
    Exchange_users: Array<Exchange_User>;
    Exchange_bundle?: Maybe<Exchange_Bundle>;
    Exchange_bundles: Array<Exchange_Bundle>;
    Exchange_factory?: Maybe<Exchange_Factory>;
    Exchange_factories: Array<Exchange_Factory>;
    Exchange_hourData?: Maybe<Exchange_HourData>;
    Exchange_hourDatas: Array<Exchange_HourData>;
    Exchange_dayData?: Maybe<Exchange_DayData>;
    Exchange_dayDatas: Array<Exchange_DayData>;
    Exchange_token?: Maybe<Exchange_Token>;
    Exchange_tokens: Array<Exchange_Token>;
    Exchange_tokenHourData?: Maybe<Exchange_TokenHourData>;
    Exchange_tokenHourDatas: Array<Exchange_TokenHourData>;
    Exchange_tokenDayData?: Maybe<Exchange_TokenDayData>;
    Exchange_tokenDayDatas: Array<Exchange_TokenDayData>;
    Exchange_pair?: Maybe<Exchange_Pair>;
    Exchange_pairs: Array<Exchange_Pair>;
    Exchange_pairHourData?: Maybe<Exchange_PairHourData>;
    Exchange_pairHourDatas: Array<Exchange_PairHourData>;
    Exchange_pairDayData?: Maybe<Exchange_PairDayData>;
    Exchange_pairDayDatas: Array<Exchange_PairDayData>;
    Exchange_liquidityPosition?: Maybe<Exchange_LiquidityPosition>;
    Exchange_liquidityPositions: Array<Exchange_LiquidityPosition>;
    Exchange_liquidityPositionSnapshot?: Maybe<Exchange_LiquidityPositionSnapshot>;
    Exchange_liquidityPositionSnapshots: Array<Exchange_LiquidityPositionSnapshot>;
    Exchange_transaction?: Maybe<Exchange_Transaction>;
    Exchange_transactions: Array<Exchange_Transaction>;
    Exchange_mint?: Maybe<Exchange_Mint>;
    Exchange_mints: Array<Exchange_Mint>;
    Exchange_burn?: Maybe<Exchange_Burn>;
    Exchange_burns: Array<Exchange_Burn>;
    Exchange_swap?: Maybe<Exchange_Swap>;
    Exchange_swaps: Array<Exchange_Swap>;
    /** Access to subgraph metadata */
    Exchange__meta?: Maybe<Exchange__Meta_>;
};
export declare type SubscriptionExchange_userArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_usersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_User_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_User_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_bundleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_bundlesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Bundle_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Bundle_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_factoryArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_factoriesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Factory_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Factory_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_hourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_hourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_HourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_HourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_dayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_dayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_DayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_DayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Token_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Token_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokenHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokenHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenHourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokenDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_tokenDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenDayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Pair_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Pair_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairHourDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairHourDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairHourData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairDayDataArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_pairDayDatasArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairDayData_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_liquidityPositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_liquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_liquidityPositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_liquidityPositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPositionSnapshot_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_transactionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_transactionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Transaction_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Transaction_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_mintArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_mintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Mint_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Mint_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_burnArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_burnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Burn_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Burn_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_swapArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange_swapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Swap_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Swap_filter>;
    block?: InputMaybe<Exchange_Block_height>;
    subgraphError?: Exchange__SubgraphErrorPolicy_;
};
export declare type SubscriptionExchange__metaArgs = {
    block?: InputMaybe<Exchange_Block_height>;
};
export declare type Exchange_Swap = {
    id: Scalars['ID'];
    transaction: Exchange_Transaction;
    timestamp: Scalars['BigInt'];
    pair: Exchange_Pair;
    sender: Scalars['Exchange_Bytes'];
    amount0In: Scalars['Exchange_BigDecimal'];
    amount1In: Scalars['Exchange_BigDecimal'];
    amount0Out: Scalars['Exchange_BigDecimal'];
    amount1Out: Scalars['Exchange_BigDecimal'];
    to: Scalars['Exchange_Bytes'];
    logIndex?: Maybe<Scalars['BigInt']>;
    amountUSD: Scalars['Exchange_BigDecimal'];
};
export declare type Exchange_Swap_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    transaction?: InputMaybe<Scalars['String']>;
    transaction_not?: InputMaybe<Scalars['String']>;
    transaction_gt?: InputMaybe<Scalars['String']>;
    transaction_lt?: InputMaybe<Scalars['String']>;
    transaction_gte?: InputMaybe<Scalars['String']>;
    transaction_lte?: InputMaybe<Scalars['String']>;
    transaction_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
    transaction_contains?: InputMaybe<Scalars['String']>;
    transaction_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_contains?: InputMaybe<Scalars['String']>;
    transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
    transaction_starts_with?: InputMaybe<Scalars['String']>;
    transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with?: InputMaybe<Scalars['String']>;
    transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_ends_with?: InputMaybe<Scalars['String']>;
    transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with?: InputMaybe<Scalars['String']>;
    transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    transaction_?: InputMaybe<Exchange_Transaction_filter>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    pair?: InputMaybe<Scalars['String']>;
    pair_not?: InputMaybe<Scalars['String']>;
    pair_gt?: InputMaybe<Scalars['String']>;
    pair_lt?: InputMaybe<Scalars['String']>;
    pair_gte?: InputMaybe<Scalars['String']>;
    pair_lte?: InputMaybe<Scalars['String']>;
    pair_in?: InputMaybe<Array<Scalars['String']>>;
    pair_not_in?: InputMaybe<Array<Scalars['String']>>;
    pair_contains?: InputMaybe<Scalars['String']>;
    pair_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_not_contains?: InputMaybe<Scalars['String']>;
    pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
    pair_starts_with?: InputMaybe<Scalars['String']>;
    pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_starts_with?: InputMaybe<Scalars['String']>;
    pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    pair_ends_with?: InputMaybe<Scalars['String']>;
    pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_not_ends_with?: InputMaybe<Scalars['String']>;
    pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    pair_?: InputMaybe<Exchange_Pair_filter>;
    sender?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    sender_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    sender_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    amount0In?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0In_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount0In_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1In?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1In_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1In_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount0Out?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount0Out_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount0Out_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1Out?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amount1Out_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amount1Out_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    to?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_not_in?: InputMaybe<Array<Scalars['Exchange_Bytes']>>;
    to_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    to_not_contains?: InputMaybe<Scalars['Exchange_Bytes']>;
    logIndex?: InputMaybe<Scalars['BigInt']>;
    logIndex_not?: InputMaybe<Scalars['BigInt']>;
    logIndex_gt?: InputMaybe<Scalars['BigInt']>;
    logIndex_lt?: InputMaybe<Scalars['BigInt']>;
    logIndex_gte?: InputMaybe<Scalars['BigInt']>;
    logIndex_lte?: InputMaybe<Scalars['BigInt']>;
    logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Swap_orderBy = 'id' | 'transaction' | 'timestamp' | 'pair' | 'sender' | 'amount0In' | 'amount1In' | 'amount0Out' | 'amount1Out' | 'to' | 'logIndex' | 'amountUSD';
export declare type Exchange_Token = {
    id: Scalars['ID'];
    factory: Exchange_Factory;
    symbol: Scalars['String'];
    name: Scalars['String'];
    decimals: Scalars['BigInt'];
    totalSupply: Scalars['BigInt'];
    volume: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    untrackedVolumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['Exchange_BigDecimal'];
    derivedETH: Scalars['Exchange_BigDecimal'];
    hourData: Array<Exchange_TokenHourData>;
    dayData: Array<Exchange_TokenDayData>;
    basePairs: Array<Exchange_Pair>;
    quotePairs: Array<Exchange_Pair>;
    basePairsDayData: Array<Exchange_PairDayData>;
    quotePairsDayData: Array<Exchange_PairDayData>;
};
export declare type Exchange_TokenhourDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenHourData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenHourData_filter>;
};
export declare type Exchange_TokendayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_TokenDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_TokenDayData_filter>;
};
export declare type Exchange_TokenbasePairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Pair_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Pair_filter>;
};
export declare type Exchange_TokenquotePairsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Pair_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Pair_filter>;
};
export declare type Exchange_TokenbasePairsDayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairDayData_filter>;
};
export declare type Exchange_TokenquotePairsDayDataArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_PairDayData_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_PairDayData_filter>;
};
export declare type Exchange_TokenDayData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    token: Exchange_Token;
    volume: Scalars['Exchange_BigDecimal'];
    volumeETH: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['Exchange_BigDecimal'];
    liquidityETH: Scalars['Exchange_BigDecimal'];
    liquidityUSD: Scalars['Exchange_BigDecimal'];
    priceUSD: Scalars['Exchange_BigDecimal'];
};
export declare type Exchange_TokenDayData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<Exchange_Token_filter>;
    volume?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    priceUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    priceUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_TokenDayData_orderBy = 'id' | 'date' | 'token' | 'volume' | 'volumeETH' | 'volumeUSD' | 'txCount' | 'liquidity' | 'liquidityETH' | 'liquidityUSD' | 'priceUSD';
export declare type Exchange_TokenHourData = {
    id: Scalars['ID'];
    date: Scalars['Int'];
    token: Exchange_Token;
    volume: Scalars['Exchange_BigDecimal'];
    volumeETH: Scalars['Exchange_BigDecimal'];
    volumeUSD: Scalars['Exchange_BigDecimal'];
    txCount: Scalars['BigInt'];
    liquidity: Scalars['Exchange_BigDecimal'];
    liquidityETH: Scalars['Exchange_BigDecimal'];
    liquidityUSD: Scalars['Exchange_BigDecimal'];
    priceUSD: Scalars['Exchange_BigDecimal'];
};
export declare type Exchange_TokenHourData_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    date?: InputMaybe<Scalars['Int']>;
    date_not?: InputMaybe<Scalars['Int']>;
    date_gt?: InputMaybe<Scalars['Int']>;
    date_lt?: InputMaybe<Scalars['Int']>;
    date_gte?: InputMaybe<Scalars['Int']>;
    date_lte?: InputMaybe<Scalars['Int']>;
    date_in?: InputMaybe<Array<Scalars['Int']>>;
    date_not_in?: InputMaybe<Array<Scalars['Int']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<Exchange_Token_filter>;
    volume?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidityUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidityUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    priceUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    priceUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    priceUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_TokenHourData_orderBy = 'id' | 'date' | 'token' | 'volume' | 'volumeETH' | 'volumeUSD' | 'txCount' | 'liquidity' | 'liquidityETH' | 'liquidityUSD' | 'priceUSD';
export declare type Exchange_Token_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    factory?: InputMaybe<Scalars['String']>;
    factory_not?: InputMaybe<Scalars['String']>;
    factory_gt?: InputMaybe<Scalars['String']>;
    factory_lt?: InputMaybe<Scalars['String']>;
    factory_gte?: InputMaybe<Scalars['String']>;
    factory_lte?: InputMaybe<Scalars['String']>;
    factory_in?: InputMaybe<Array<Scalars['String']>>;
    factory_not_in?: InputMaybe<Array<Scalars['String']>>;
    factory_contains?: InputMaybe<Scalars['String']>;
    factory_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_not_contains?: InputMaybe<Scalars['String']>;
    factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
    factory_starts_with?: InputMaybe<Scalars['String']>;
    factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_starts_with?: InputMaybe<Scalars['String']>;
    factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    factory_ends_with?: InputMaybe<Scalars['String']>;
    factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_not_ends_with?: InputMaybe<Scalars['String']>;
    factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    factory_?: InputMaybe<Exchange_Factory_filter>;
    symbol?: InputMaybe<Scalars['String']>;
    symbol_not?: InputMaybe<Scalars['String']>;
    symbol_gt?: InputMaybe<Scalars['String']>;
    symbol_lt?: InputMaybe<Scalars['String']>;
    symbol_gte?: InputMaybe<Scalars['String']>;
    symbol_lte?: InputMaybe<Scalars['String']>;
    symbol_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_contains?: InputMaybe<Scalars['String']>;
    symbol_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_contains?: InputMaybe<Scalars['String']>;
    symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_starts_with?: InputMaybe<Scalars['String']>;
    symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_ends_with?: InputMaybe<Scalars['String']>;
    symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    decimals?: InputMaybe<Scalars['BigInt']>;
    decimals_not?: InputMaybe<Scalars['BigInt']>;
    decimals_gt?: InputMaybe<Scalars['BigInt']>;
    decimals_lt?: InputMaybe<Scalars['BigInt']>;
    decimals_gte?: InputMaybe<Scalars['BigInt']>;
    decimals_lte?: InputMaybe<Scalars['BigInt']>;
    decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
    decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalSupply?: InputMaybe<Scalars['BigInt']>;
    totalSupply_not?: InputMaybe<Scalars['BigInt']>;
    totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
    totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
    totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
    totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
    totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    volume?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volume_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volume_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    volumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    volumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    txCount?: InputMaybe<Scalars['BigInt']>;
    txCount_not?: InputMaybe<Scalars['BigInt']>;
    txCount_gt?: InputMaybe<Scalars['BigInt']>;
    txCount_lt?: InputMaybe<Scalars['BigInt']>;
    txCount_gte?: InputMaybe<Scalars['BigInt']>;
    txCount_lte?: InputMaybe<Scalars['BigInt']>;
    txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidity?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    liquidity_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    liquidity_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    derivedETH?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_not?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_gt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_lt?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_gte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_lte?: InputMaybe<Scalars['Exchange_BigDecimal']>;
    derivedETH_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    derivedETH_not_in?: InputMaybe<Array<Scalars['Exchange_BigDecimal']>>;
    hourData_?: InputMaybe<Exchange_TokenHourData_filter>;
    dayData_?: InputMaybe<Exchange_TokenDayData_filter>;
    basePairs_?: InputMaybe<Exchange_Pair_filter>;
    quotePairs_?: InputMaybe<Exchange_Pair_filter>;
    basePairsDayData_?: InputMaybe<Exchange_PairDayData_filter>;
    quotePairsDayData_?: InputMaybe<Exchange_PairDayData_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Token_orderBy = 'id' | 'factory' | 'symbol' | 'name' | 'decimals' | 'totalSupply' | 'volume' | 'volumeUSD' | 'untrackedVolumeUSD' | 'txCount' | 'liquidity' | 'derivedETH' | 'hourData' | 'dayData' | 'basePairs' | 'quotePairs' | 'basePairsDayData' | 'quotePairsDayData';
export declare type Exchange_Transaction = {
    id: Scalars['ID'];
    blockNumber: Scalars['BigInt'];
    timestamp: Scalars['BigInt'];
    mints: Array<Maybe<Exchange_Mint>>;
    burns: Array<Maybe<Exchange_Burn>>;
    swaps: Array<Maybe<Exchange_Swap>>;
};
export declare type Exchange_TransactionmintsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Mint_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Mint_filter>;
};
export declare type Exchange_TransactionburnsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Burn_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Burn_filter>;
};
export declare type Exchange_TransactionswapsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_Swap_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_Swap_filter>;
};
export declare type Exchange_Transaction_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    mints?: InputMaybe<Array<Scalars['String']>>;
    mints_not?: InputMaybe<Array<Scalars['String']>>;
    mints_contains?: InputMaybe<Array<Scalars['String']>>;
    mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
    mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mints_?: InputMaybe<Exchange_Mint_filter>;
    burns?: InputMaybe<Array<Scalars['String']>>;
    burns_not?: InputMaybe<Array<Scalars['String']>>;
    burns_contains?: InputMaybe<Array<Scalars['String']>>;
    burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
    burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    burns_?: InputMaybe<Exchange_Burn_filter>;
    swaps?: InputMaybe<Array<Scalars['String']>>;
    swaps_not?: InputMaybe<Array<Scalars['String']>>;
    swaps_contains?: InputMaybe<Array<Scalars['String']>>;
    swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
    swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    swaps_?: InputMaybe<Exchange_Swap_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_Transaction_orderBy = 'id' | 'blockNumber' | 'timestamp' | 'mints' | 'burns' | 'swaps';
export declare type Exchange_User = {
    id: Scalars['ID'];
    liquidityPositions: Array<Exchange_LiquidityPosition>;
};
export declare type Exchange_UserliquidityPositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
};
export declare type Exchange_User_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    liquidityPositions_?: InputMaybe<Exchange_LiquidityPosition_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<Exchange_BlockChangedFilter>;
};
export declare type Exchange_User_orderBy = 'id' | 'liquidityPositions';
export declare type Exchange__Block_ = {
    /** The hash of the block */
    hash?: Maybe<Scalars['Exchange_Bytes']>;
    /** The block number */
    number: Scalars['Int'];
    /** Integer representation of the timestamp stored in blocks for the chain */
    timestamp?: Maybe<Scalars['Int']>;
};
/** The type for the top-level _meta field */
export declare type Exchange__Meta_ = {
    /**
     * Information about a specific subgraph block. The hash of the block
     * will be null if the _meta field has a block constraint that asks for
     * a block number. It will be filled if the _meta field has no block constraint
     * and therefore asks for the latest  block
     *
     */
    block: Exchange__Block_;
    /** The deployment ID */
    deployment: Scalars['String'];
    /** If `true`, the subgraph encountered indexing errors at some past block */
    hasIndexingErrors: Scalars['Boolean'];
};
export declare type Exchange__SubgraphErrorPolicy_ = 
/** Data will be returned even if the subgraph has indexing errors */
'allow'
/** If the subgraph has indexing errors, data will be omitted. The default. */
 | 'deny';
export declare type WithIndex<TObject> = TObject & Record<string, any>;
export declare type ResolversObject<TObject> = WithIndex<TObject>;
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = ResolversObject<{
    Exchange_BigDecimal: ResolverTypeWrapper<Scalars['Exchange_BigDecimal']>;
    BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
    Exchange_BlockChangedFilter: Exchange_BlockChangedFilter;
    Exchange_Block_height: Exchange_Block_height;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Exchange_Bundle: ResolverTypeWrapper<Exchange_Bundle>;
    Exchange_Bundle_filter: Exchange_Bundle_filter;
    Exchange_Bundle_orderBy: Exchange_Bundle_orderBy;
    Exchange_Burn: ResolverTypeWrapper<Exchange_Burn>;
    Exchange_Burn_filter: Exchange_Burn_filter;
    Exchange_Burn_orderBy: Exchange_Burn_orderBy;
    Exchange_Bytes: ResolverTypeWrapper<Scalars['Exchange_Bytes']>;
    Exchange_DayData: ResolverTypeWrapper<Exchange_DayData>;
    Exchange_DayData_filter: Exchange_DayData_filter;
    Exchange_DayData_orderBy: Exchange_DayData_orderBy;
    Exchange_Factory: ResolverTypeWrapper<Exchange_Factory>;
    Exchange_Factory_filter: Exchange_Factory_filter;
    Exchange_Factory_orderBy: Exchange_Factory_orderBy;
    Float: ResolverTypeWrapper<Scalars['Float']>;
    Exchange_HourData: ResolverTypeWrapper<Exchange_HourData>;
    Exchange_HourData_filter: Exchange_HourData_filter;
    Exchange_HourData_orderBy: Exchange_HourData_orderBy;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Exchange_LiquidityPosition: ResolverTypeWrapper<Exchange_LiquidityPosition>;
    Exchange_LiquidityPositionSnapshot: ResolverTypeWrapper<Exchange_LiquidityPositionSnapshot>;
    Exchange_LiquidityPositionSnapshot_filter: Exchange_LiquidityPositionSnapshot_filter;
    Exchange_LiquidityPositionSnapshot_orderBy: Exchange_LiquidityPositionSnapshot_orderBy;
    Exchange_LiquidityPosition_filter: Exchange_LiquidityPosition_filter;
    Exchange_LiquidityPosition_orderBy: Exchange_LiquidityPosition_orderBy;
    Exchange_Mint: ResolverTypeWrapper<Exchange_Mint>;
    Exchange_Mint_filter: Exchange_Mint_filter;
    Exchange_Mint_orderBy: Exchange_Mint_orderBy;
    Exchange_OrderDirection: Exchange_OrderDirection;
    Exchange_Pair: ResolverTypeWrapper<Exchange_Pair>;
    Exchange_PairDayData: ResolverTypeWrapper<Exchange_PairDayData>;
    Exchange_PairDayData_filter: Exchange_PairDayData_filter;
    Exchange_PairDayData_orderBy: Exchange_PairDayData_orderBy;
    Exchange_PairHourData: ResolverTypeWrapper<Exchange_PairHourData>;
    Exchange_PairHourData_filter: Exchange_PairHourData_filter;
    Exchange_PairHourData_orderBy: Exchange_PairHourData_orderBy;
    Exchange_Pair_filter: Exchange_Pair_filter;
    Exchange_Pair_orderBy: Exchange_Pair_orderBy;
    Query: ResolverTypeWrapper<{}>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Subscription: ResolverTypeWrapper<{}>;
    Exchange_Swap: ResolverTypeWrapper<Exchange_Swap>;
    Exchange_Swap_filter: Exchange_Swap_filter;
    Exchange_Swap_orderBy: Exchange_Swap_orderBy;
    Exchange_Token: ResolverTypeWrapper<Exchange_Token>;
    Exchange_TokenDayData: ResolverTypeWrapper<Exchange_TokenDayData>;
    Exchange_TokenDayData_filter: Exchange_TokenDayData_filter;
    Exchange_TokenDayData_orderBy: Exchange_TokenDayData_orderBy;
    Exchange_TokenHourData: ResolverTypeWrapper<Exchange_TokenHourData>;
    Exchange_TokenHourData_filter: Exchange_TokenHourData_filter;
    Exchange_TokenHourData_orderBy: Exchange_TokenHourData_orderBy;
    Exchange_Token_filter: Exchange_Token_filter;
    Exchange_Token_orderBy: Exchange_Token_orderBy;
    Exchange_Transaction: ResolverTypeWrapper<Exchange_Transaction>;
    Exchange_Transaction_filter: Exchange_Transaction_filter;
    Exchange_Transaction_orderBy: Exchange_Transaction_orderBy;
    Exchange_User: ResolverTypeWrapper<Exchange_User>;
    Exchange_User_filter: Exchange_User_filter;
    Exchange_User_orderBy: Exchange_User_orderBy;
    Exchange__Block_: ResolverTypeWrapper<Exchange__Block_>;
    Exchange__Meta_: ResolverTypeWrapper<Exchange__Meta_>;
    Exchange__SubgraphErrorPolicy_: Exchange__SubgraphErrorPolicy_;
}>;
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = ResolversObject<{
    Exchange_BigDecimal: Scalars['Exchange_BigDecimal'];
    BigInt: Scalars['BigInt'];
    Exchange_BlockChangedFilter: Exchange_BlockChangedFilter;
    Exchange_Block_height: Exchange_Block_height;
    Boolean: Scalars['Boolean'];
    Exchange_Bundle: Exchange_Bundle;
    Exchange_Bundle_filter: Exchange_Bundle_filter;
    Exchange_Burn: Exchange_Burn;
    Exchange_Burn_filter: Exchange_Burn_filter;
    Exchange_Bytes: Scalars['Exchange_Bytes'];
    Exchange_DayData: Exchange_DayData;
    Exchange_DayData_filter: Exchange_DayData_filter;
    Exchange_Factory: Exchange_Factory;
    Exchange_Factory_filter: Exchange_Factory_filter;
    Float: Scalars['Float'];
    Exchange_HourData: Exchange_HourData;
    Exchange_HourData_filter: Exchange_HourData_filter;
    ID: Scalars['ID'];
    Int: Scalars['Int'];
    Exchange_LiquidityPosition: Exchange_LiquidityPosition;
    Exchange_LiquidityPositionSnapshot: Exchange_LiquidityPositionSnapshot;
    Exchange_LiquidityPositionSnapshot_filter: Exchange_LiquidityPositionSnapshot_filter;
    Exchange_LiquidityPosition_filter: Exchange_LiquidityPosition_filter;
    Exchange_Mint: Exchange_Mint;
    Exchange_Mint_filter: Exchange_Mint_filter;
    Exchange_Pair: Exchange_Pair;
    Exchange_PairDayData: Exchange_PairDayData;
    Exchange_PairDayData_filter: Exchange_PairDayData_filter;
    Exchange_PairHourData: Exchange_PairHourData;
    Exchange_PairHourData_filter: Exchange_PairHourData_filter;
    Exchange_Pair_filter: Exchange_Pair_filter;
    Query: {};
    String: Scalars['String'];
    Subscription: {};
    Exchange_Swap: Exchange_Swap;
    Exchange_Swap_filter: Exchange_Swap_filter;
    Exchange_Token: Exchange_Token;
    Exchange_TokenDayData: Exchange_TokenDayData;
    Exchange_TokenDayData_filter: Exchange_TokenDayData_filter;
    Exchange_TokenHourData: Exchange_TokenHourData;
    Exchange_TokenHourData_filter: Exchange_TokenHourData_filter;
    Exchange_Token_filter: Exchange_Token_filter;
    Exchange_Transaction: Exchange_Transaction;
    Exchange_Transaction_filter: Exchange_Transaction_filter;
    Exchange_User: Exchange_User;
    Exchange_User_filter: Exchange_User_filter;
    Exchange__Block_: Exchange__Block_;
    Exchange__Meta_: Exchange__Meta_;
}>;
export declare type entityDirectiveArgs = {};
export declare type entityDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = entityDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export declare type subgraphIdDirectiveArgs = {
    id: Scalars['String'];
};
export declare type subgraphIdDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = subgraphIdDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export declare type derivedFromDirectiveArgs = {
    field: Scalars['String'];
};
export declare type derivedFromDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = derivedFromDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export interface Exchange_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Exchange_BigDecimal'], any> {
    name: 'Exchange_BigDecimal';
}
export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
    name: 'BigInt';
}
export declare type Exchange_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Bundle'] = ResolversParentTypes['Exchange_Bundle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    ethPrice?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Burn'] = ResolversParentTypes['Exchange_Burn']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Exchange_Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    sender?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    amount0?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    amount1?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    to?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    feeTo?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    feeLiquidity?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface Exchange_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Exchange_Bytes'], any> {
    name: 'Exchange_Bytes';
}
export declare type Exchange_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_DayData'] = ResolversParentTypes['Exchange_DayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Exchange_Factory'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    untrackedVolume?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Factory'] = ResolversParentTypes['Exchange_Factory']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pairs?: Resolver<Array<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<Exchange_FactorypairsArgs, 'skip' | 'first'>>;
    tokens?: Resolver<Array<ResolversTypes['Exchange_Token']>, ParentType, ContextType, RequireFields<Exchange_FactorytokensArgs, 'skip' | 'first'>>;
    hourData?: Resolver<Array<ResolversTypes['Exchange_HourData']>, ParentType, ContextType, RequireFields<Exchange_FactoryhourDataArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['Exchange_DayData']>, ParentType, ContextType, RequireFields<Exchange_FactorydayDataArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_HourData'] = ResolversParentTypes['Exchange_HourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Exchange_Factory'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    untrackedVolume?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_LiquidityPosition'] = ResolversParentTypes['Exchange_LiquidityPosition']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    user?: Resolver<ResolversTypes['Exchange_User'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    liquidityTokenBalance?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    snapshots?: Resolver<Array<Maybe<ResolversTypes['Exchange_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<Exchange_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
    block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_LiquidityPositionSnapshot'] = ResolversParentTypes['Exchange_LiquidityPositionSnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    liquidityPosition?: Resolver<ResolversTypes['Exchange_LiquidityPosition'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    user?: Resolver<ResolversTypes['Exchange_User'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    token0PriceUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    token1PriceUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityTokenTotalSupply?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityTokenBalance?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Mint'] = ResolversParentTypes['Exchange_Mint']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Exchange_Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    to?: Resolver<ResolversTypes['Exchange_Bytes'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    sender?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    amount0?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    amount1?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    feeTo?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    feeLiquidity?: Resolver<Maybe<ResolversTypes['Exchange_BigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Pair'] = ResolversParentTypes['Exchange_Pair']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Exchange_Factory'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    token0?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    token1?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserveETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    trackedReserveETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    token0Price?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    token1Price?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidityPositions?: Resolver<Array<ResolversTypes['Exchange_LiquidityPosition']>, ParentType, ContextType, RequireFields<Exchange_PairliquidityPositionsArgs, 'skip' | 'first'>>;
    liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['Exchange_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<Exchange_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['Exchange_PairDayData']>, ParentType, ContextType, RequireFields<Exchange_PairdayDataArgs, 'skip' | 'first'>>;
    hourData?: Resolver<Array<ResolversTypes['Exchange_PairHourData']>, ParentType, ContextType, RequireFields<Exchange_PairhourDataArgs, 'skip' | 'first'>>;
    mints?: Resolver<Array<ResolversTypes['Exchange_Mint']>, ParentType, ContextType, RequireFields<Exchange_PairmintsArgs, 'skip' | 'first'>>;
    burns?: Resolver<Array<ResolversTypes['Exchange_Burn']>, ParentType, ContextType, RequireFields<Exchange_PairburnsArgs, 'skip' | 'first'>>;
    swaps?: Resolver<Array<ResolversTypes['Exchange_Swap']>, ParentType, ContextType, RequireFields<Exchange_PairswapsArgs, 'skip' | 'first'>>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_PairDayData'] = ResolversParentTypes['Exchange_PairDayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    token0?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    token1?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_PairHourData'] = ResolversParentTypes['Exchange_PairHourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    reserve0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserve1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    reserveUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken0?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeToken1?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
    Exchange_user?: Resolver<Maybe<ResolversTypes['Exchange_User']>, ParentType, ContextType, RequireFields<QueryExchange_userArgs, 'id' | 'subgraphError'>>;
    Exchange_users?: Resolver<Array<ResolversTypes['Exchange_User']>, ParentType, ContextType, RequireFields<QueryExchange_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_bundle?: Resolver<Maybe<ResolversTypes['Exchange_Bundle']>, ParentType, ContextType, RequireFields<QueryExchange_bundleArgs, 'id' | 'subgraphError'>>;
    Exchange_bundles?: Resolver<Array<ResolversTypes['Exchange_Bundle']>, ParentType, ContextType, RequireFields<QueryExchange_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_factory?: Resolver<Maybe<ResolversTypes['Exchange_Factory']>, ParentType, ContextType, RequireFields<QueryExchange_factoryArgs, 'id' | 'subgraphError'>>;
    Exchange_factories?: Resolver<Array<ResolversTypes['Exchange_Factory']>, ParentType, ContextType, RequireFields<QueryExchange_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_hourData?: Resolver<Maybe<ResolversTypes['Exchange_HourData']>, ParentType, ContextType, RequireFields<QueryExchange_hourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_hourDatas?: Resolver<Array<ResolversTypes['Exchange_HourData']>, ParentType, ContextType, RequireFields<QueryExchange_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_dayData?: Resolver<Maybe<ResolversTypes['Exchange_DayData']>, ParentType, ContextType, RequireFields<QueryExchange_dayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_dayDatas?: Resolver<Array<ResolversTypes['Exchange_DayData']>, ParentType, ContextType, RequireFields<QueryExchange_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_token?: Resolver<Maybe<ResolversTypes['Exchange_Token']>, ParentType, ContextType, RequireFields<QueryExchange_tokenArgs, 'id' | 'subgraphError'>>;
    Exchange_tokens?: Resolver<Array<ResolversTypes['Exchange_Token']>, ParentType, ContextType, RequireFields<QueryExchange_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_tokenHourData?: Resolver<Maybe<ResolversTypes['Exchange_TokenHourData']>, ParentType, ContextType, RequireFields<QueryExchange_tokenHourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_tokenHourDatas?: Resolver<Array<ResolversTypes['Exchange_TokenHourData']>, ParentType, ContextType, RequireFields<QueryExchange_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_tokenDayData?: Resolver<Maybe<ResolversTypes['Exchange_TokenDayData']>, ParentType, ContextType, RequireFields<QueryExchange_tokenDayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_tokenDayDatas?: Resolver<Array<ResolversTypes['Exchange_TokenDayData']>, ParentType, ContextType, RequireFields<QueryExchange_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pair?: Resolver<Maybe<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<QueryExchange_pairArgs, 'id' | 'subgraphError'>>;
    Exchange_pairs?: Resolver<Array<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<QueryExchange_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pairHourData?: Resolver<Maybe<ResolversTypes['Exchange_PairHourData']>, ParentType, ContextType, RequireFields<QueryExchange_pairHourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_pairHourDatas?: Resolver<Array<ResolversTypes['Exchange_PairHourData']>, ParentType, ContextType, RequireFields<QueryExchange_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pairDayData?: Resolver<Maybe<ResolversTypes['Exchange_PairDayData']>, ParentType, ContextType, RequireFields<QueryExchange_pairDayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_pairDayDatas?: Resolver<Array<ResolversTypes['Exchange_PairDayData']>, ParentType, ContextType, RequireFields<QueryExchange_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_liquidityPosition?: Resolver<Maybe<ResolversTypes['Exchange_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryExchange_liquidityPositionArgs, 'id' | 'subgraphError'>>;
    Exchange_liquidityPositions?: Resolver<Array<ResolversTypes['Exchange_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryExchange_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['Exchange_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryExchange_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
    Exchange_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['Exchange_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryExchange_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_transaction?: Resolver<Maybe<ResolversTypes['Exchange_Transaction']>, ParentType, ContextType, RequireFields<QueryExchange_transactionArgs, 'id' | 'subgraphError'>>;
    Exchange_transactions?: Resolver<Array<ResolversTypes['Exchange_Transaction']>, ParentType, ContextType, RequireFields<QueryExchange_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_mint?: Resolver<Maybe<ResolversTypes['Exchange_Mint']>, ParentType, ContextType, RequireFields<QueryExchange_mintArgs, 'id' | 'subgraphError'>>;
    Exchange_mints?: Resolver<Array<ResolversTypes['Exchange_Mint']>, ParentType, ContextType, RequireFields<QueryExchange_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_burn?: Resolver<Maybe<ResolversTypes['Exchange_Burn']>, ParentType, ContextType, RequireFields<QueryExchange_burnArgs, 'id' | 'subgraphError'>>;
    Exchange_burns?: Resolver<Array<ResolversTypes['Exchange_Burn']>, ParentType, ContextType, RequireFields<QueryExchange_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_swap?: Resolver<Maybe<ResolversTypes['Exchange_Swap']>, ParentType, ContextType, RequireFields<QueryExchange_swapArgs, 'id' | 'subgraphError'>>;
    Exchange_swaps?: Resolver<Array<ResolversTypes['Exchange_Swap']>, ParentType, ContextType, RequireFields<QueryExchange_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_tokenSearch?: Resolver<Array<ResolversTypes['Exchange_Token']>, ParentType, ContextType, RequireFields<QueryExchange_tokenSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    Exchange_pairSearch?: Resolver<Array<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<QueryExchange_pairSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    Exchange_userSearch?: Resolver<Array<ResolversTypes['Exchange_User']>, ParentType, ContextType, RequireFields<QueryExchange_userSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
    Exchange__meta?: Resolver<Maybe<ResolversTypes['Exchange__Meta_']>, ParentType, ContextType, Partial<QueryExchange__metaArgs>>;
}>;
export declare type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
    Exchange_user?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_User']>, "Exchange_user", ParentType, ContextType, RequireFields<SubscriptionExchange_userArgs, 'id' | 'subgraphError'>>;
    Exchange_users?: SubscriptionResolver<Array<ResolversTypes['Exchange_User']>, "Exchange_users", ParentType, ContextType, RequireFields<SubscriptionExchange_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_bundle?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Bundle']>, "Exchange_bundle", ParentType, ContextType, RequireFields<SubscriptionExchange_bundleArgs, 'id' | 'subgraphError'>>;
    Exchange_bundles?: SubscriptionResolver<Array<ResolversTypes['Exchange_Bundle']>, "Exchange_bundles", ParentType, ContextType, RequireFields<SubscriptionExchange_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_factory?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Factory']>, "Exchange_factory", ParentType, ContextType, RequireFields<SubscriptionExchange_factoryArgs, 'id' | 'subgraphError'>>;
    Exchange_factories?: SubscriptionResolver<Array<ResolversTypes['Exchange_Factory']>, "Exchange_factories", ParentType, ContextType, RequireFields<SubscriptionExchange_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_hourData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_HourData']>, "Exchange_hourData", ParentType, ContextType, RequireFields<SubscriptionExchange_hourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_hourDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_HourData']>, "Exchange_hourDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_dayData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_DayData']>, "Exchange_dayData", ParentType, ContextType, RequireFields<SubscriptionExchange_dayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_dayDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_DayData']>, "Exchange_dayDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_token?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Token']>, "Exchange_token", ParentType, ContextType, RequireFields<SubscriptionExchange_tokenArgs, 'id' | 'subgraphError'>>;
    Exchange_tokens?: SubscriptionResolver<Array<ResolversTypes['Exchange_Token']>, "Exchange_tokens", ParentType, ContextType, RequireFields<SubscriptionExchange_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_TokenHourData']>, "Exchange_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionExchange_tokenHourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_TokenHourData']>, "Exchange_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_TokenDayData']>, "Exchange_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionExchange_tokenDayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_TokenDayData']>, "Exchange_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pair?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Pair']>, "Exchange_pair", ParentType, ContextType, RequireFields<SubscriptionExchange_pairArgs, 'id' | 'subgraphError'>>;
    Exchange_pairs?: SubscriptionResolver<Array<ResolversTypes['Exchange_Pair']>, "Exchange_pairs", ParentType, ContextType, RequireFields<SubscriptionExchange_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_PairHourData']>, "Exchange_pairHourData", ParentType, ContextType, RequireFields<SubscriptionExchange_pairHourDataArgs, 'id' | 'subgraphError'>>;
    Exchange_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_PairHourData']>, "Exchange_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_PairDayData']>, "Exchange_pairDayData", ParentType, ContextType, RequireFields<SubscriptionExchange_pairDayDataArgs, 'id' | 'subgraphError'>>;
    Exchange_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['Exchange_PairDayData']>, "Exchange_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionExchange_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_LiquidityPosition']>, "Exchange_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionExchange_liquidityPositionArgs, 'id' | 'subgraphError'>>;
    Exchange_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['Exchange_LiquidityPosition']>, "Exchange_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionExchange_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_LiquidityPositionSnapshot']>, "Exchange_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionExchange_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
    Exchange_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['Exchange_LiquidityPositionSnapshot']>, "Exchange_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionExchange_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_transaction?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Transaction']>, "Exchange_transaction", ParentType, ContextType, RequireFields<SubscriptionExchange_transactionArgs, 'id' | 'subgraphError'>>;
    Exchange_transactions?: SubscriptionResolver<Array<ResolversTypes['Exchange_Transaction']>, "Exchange_transactions", ParentType, ContextType, RequireFields<SubscriptionExchange_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_mint?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Mint']>, "Exchange_mint", ParentType, ContextType, RequireFields<SubscriptionExchange_mintArgs, 'id' | 'subgraphError'>>;
    Exchange_mints?: SubscriptionResolver<Array<ResolversTypes['Exchange_Mint']>, "Exchange_mints", ParentType, ContextType, RequireFields<SubscriptionExchange_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_burn?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Burn']>, "Exchange_burn", ParentType, ContextType, RequireFields<SubscriptionExchange_burnArgs, 'id' | 'subgraphError'>>;
    Exchange_burns?: SubscriptionResolver<Array<ResolversTypes['Exchange_Burn']>, "Exchange_burns", ParentType, ContextType, RequireFields<SubscriptionExchange_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange_swap?: SubscriptionResolver<Maybe<ResolversTypes['Exchange_Swap']>, "Exchange_swap", ParentType, ContextType, RequireFields<SubscriptionExchange_swapArgs, 'id' | 'subgraphError'>>;
    Exchange_swaps?: SubscriptionResolver<Array<ResolversTypes['Exchange_Swap']>, "Exchange_swaps", ParentType, ContextType, RequireFields<SubscriptionExchange_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
    Exchange__meta?: SubscriptionResolver<Maybe<ResolversTypes['Exchange__Meta_']>, "Exchange__meta", ParentType, ContextType, Partial<SubscriptionExchange__metaArgs>>;
}>;
export declare type Exchange_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Swap'] = ResolversParentTypes['Exchange_Swap']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    transaction?: Resolver<ResolversTypes['Exchange_Transaction'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    pair?: Resolver<ResolversTypes['Exchange_Pair'], ParentType, ContextType>;
    sender?: Resolver<ResolversTypes['Exchange_Bytes'], ParentType, ContextType>;
    amount0In?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    amount1In?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    amount0Out?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    amount1Out?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    to?: Resolver<ResolversTypes['Exchange_Bytes'], ParentType, ContextType>;
    logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Token'] = ResolversParentTypes['Exchange_Token']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    factory?: Resolver<ResolversTypes['Exchange_Factory'], ParentType, ContextType>;
    symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    untrackedVolumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    derivedETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    hourData?: Resolver<Array<ResolversTypes['Exchange_TokenHourData']>, ParentType, ContextType, RequireFields<Exchange_TokenhourDataArgs, 'skip' | 'first'>>;
    dayData?: Resolver<Array<ResolversTypes['Exchange_TokenDayData']>, ParentType, ContextType, RequireFields<Exchange_TokendayDataArgs, 'skip' | 'first'>>;
    basePairs?: Resolver<Array<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<Exchange_TokenbasePairsArgs, 'skip' | 'first'>>;
    quotePairs?: Resolver<Array<ResolversTypes['Exchange_Pair']>, ParentType, ContextType, RequireFields<Exchange_TokenquotePairsArgs, 'skip' | 'first'>>;
    basePairsDayData?: Resolver<Array<ResolversTypes['Exchange_PairDayData']>, ParentType, ContextType, RequireFields<Exchange_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
    quotePairsDayData?: Resolver<Array<ResolversTypes['Exchange_PairDayData']>, ParentType, ContextType, RequireFields<Exchange_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_TokenDayData'] = ResolversParentTypes['Exchange_TokenDayData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    priceUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_TokenHourData'] = ResolversParentTypes['Exchange_TokenHourData']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['Exchange_Token'], ParentType, ContextType>;
    volume?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    volumeUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidity?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityETH?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    liquidityUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    priceUSD?: Resolver<ResolversTypes['Exchange_BigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_Transaction'] = ResolversParentTypes['Exchange_Transaction']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    mints?: Resolver<Array<Maybe<ResolversTypes['Exchange_Mint']>>, ParentType, ContextType, RequireFields<Exchange_TransactionmintsArgs, 'skip' | 'first'>>;
    burns?: Resolver<Array<Maybe<ResolversTypes['Exchange_Burn']>>, ParentType, ContextType, RequireFields<Exchange_TransactionburnsArgs, 'skip' | 'first'>>;
    swaps?: Resolver<Array<Maybe<ResolversTypes['Exchange_Swap']>>, ParentType, ContextType, RequireFields<Exchange_TransactionswapsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange_User'] = ResolversParentTypes['Exchange_User']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    liquidityPositions?: Resolver<Array<ResolversTypes['Exchange_LiquidityPosition']>, ParentType, ContextType, RequireFields<Exchange_UserliquidityPositionsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange__Block_'] = ResolversParentTypes['Exchange__Block_']> = ResolversObject<{
    hash?: Resolver<Maybe<ResolversTypes['Exchange_Bytes']>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Exchange__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Exchange__Meta_'] = ResolversParentTypes['Exchange__Meta_']> = ResolversObject<{
    block?: Resolver<ResolversTypes['Exchange__Block_'], ParentType, ContextType>;
    deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Resolvers<ContextType = MeshContext> = ResolversObject<{
    Exchange_BigDecimal?: GraphQLScalarType;
    BigInt?: GraphQLScalarType;
    Exchange_Bundle?: Exchange_BundleResolvers<ContextType>;
    Exchange_Burn?: Exchange_BurnResolvers<ContextType>;
    Exchange_Bytes?: GraphQLScalarType;
    Exchange_DayData?: Exchange_DayDataResolvers<ContextType>;
    Exchange_Factory?: Exchange_FactoryResolvers<ContextType>;
    Exchange_HourData?: Exchange_HourDataResolvers<ContextType>;
    Exchange_LiquidityPosition?: Exchange_LiquidityPositionResolvers<ContextType>;
    Exchange_LiquidityPositionSnapshot?: Exchange_LiquidityPositionSnapshotResolvers<ContextType>;
    Exchange_Mint?: Exchange_MintResolvers<ContextType>;
    Exchange_Pair?: Exchange_PairResolvers<ContextType>;
    Exchange_PairDayData?: Exchange_PairDayDataResolvers<ContextType>;
    Exchange_PairHourData?: Exchange_PairHourDataResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Subscription?: SubscriptionResolvers<ContextType>;
    Exchange_Swap?: Exchange_SwapResolvers<ContextType>;
    Exchange_Token?: Exchange_TokenResolvers<ContextType>;
    Exchange_TokenDayData?: Exchange_TokenDayDataResolvers<ContextType>;
    Exchange_TokenHourData?: Exchange_TokenHourDataResolvers<ContextType>;
    Exchange_Transaction?: Exchange_TransactionResolvers<ContextType>;
    Exchange_User?: Exchange_UserResolvers<ContextType>;
    Exchange__Block_?: Exchange__Block_Resolvers<ContextType>;
    Exchange__Meta_?: Exchange__Meta_Resolvers<ContextType>;
}>;
export declare type DirectiveResolvers<ContextType = MeshContext> = ResolversObject<{
    entity?: entityDirectiveResolver<any, any, ContextType>;
    subgraphId?: subgraphIdDirectiveResolver<any, any, ContextType>;
    derivedFrom?: derivedFromDirectiveResolver<any, any, ContextType>;
}>;
export declare type MeshContext = ExchnageTypes.Context & BaseMeshContext;
export declare const rawServeConfig: YamlConfig.Config['serve'];
export declare function getMeshOptions(): Promise<GetMeshOptions>;
export declare function createBuiltMeshHTTPHandler(): MeshHTTPHandler<MeshContext>;
export declare function getBuiltGraphClient(): Promise<MeshInstance>;
export declare const execute: ExecuteMeshFn;
export declare const subscribe: SubscribeMeshFn;
export declare function getBuiltGraphSDK<TGlobalContext = any, TOperationContext = any>(globalContext?: TGlobalContext): {
    ExchangeLiquidityPositions(variables?: Exact<{
        first?: number;
        skip?: number;
        orderBy?: Exchange_LiquidityPosition_orderBy;
        orderDirection?: Exchange_OrderDirection;
        where?: Exchange_LiquidityPosition_filter;
        block?: Exchange_Block_height;
    }>, options?: TOperationContext): Promise<ExchangeLiquidityPositionsQuery>;
};
export declare type ExchangeLiquidityPositionsQueryVariables = Exact<{
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
    block?: InputMaybe<Exchange_Block_height>;
}>;
export declare type ExchangeLiquidityPositionsQuery = {
    liquidityPositions: Array<(Pick<Exchange_LiquidityPosition, 'id' | 'liquidityTokenBalance'> & {
        pair: (Pick<Exchange_Pair, 'id' | 'totalSupply' | 'reserveUSD'> & {
            token0: Pick<Exchange_Token, 'id' | 'symbol' | 'name' | 'decimals'>;
            token1: Pick<Exchange_Token, 'id' | 'symbol' | 'name' | 'decimals'>;
        });
    })>;
};
export declare const ExchangeLiquidityPositionsDocument: DocumentNode<ExchangeLiquidityPositionsQuery, Exact<{
    first?: InputMaybe<Scalars['Int']>;
    skip?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<Exchange_LiquidityPosition_orderBy>;
    orderDirection?: InputMaybe<Exchange_OrderDirection>;
    where?: InputMaybe<Exchange_LiquidityPosition_filter>;
    block?: InputMaybe<Exchange_Block_height>;
}>>;
export declare type Requester<C = {}, E = unknown> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>;
export declare function getSdk<C, E>(requester: Requester<C, E>): {
    ExchangeLiquidityPositions(variables?: ExchangeLiquidityPositionsQueryVariables, options?: C): Promise<ExchangeLiquidityPositionsQuery>;
};
export declare type Sdk = ReturnType<typeof getSdk>;
